Microsoft (R) Macro Assembler Version 6.14.8444		    05/16/20 10:48:10
u1.asm							     Page 1 - 1


				comment ~
				--------------------------
				ВЫХОД-5

				Задача_1 

				Написать программу из двух модулей. 
				В головном модуле описать двойное слово  X (содержимое которого трактуется 
				как число без знака) и байт Res (содержимое которого трактуется как число 
				со знаком).  
				Во вспомогательном  модуле описать  общедоступную процедуру Power2(X,Res) 
				со стандартными соглашениями о связях  (stdcall).  Параметр  X передаётся 
				в процедуру по значению, Res – по ссылке.  Процедура Power2 выполняет 
				проверку 32-битной беззнаковой величины Х: является ли она степенью двойки, 
				т.е. существует ли такое  k: от 0 до 31, что X=2^k. Если да, то процедура 
				записывает в байт Res показатель k найденной степени двойки, иначе – записывает
				в байт Res -1 (минус!). В процессе своей работы процедура не использует команды
				умножения и деления. 
				Головной модуль вводит значение переменной Х,  после чего обращается к внешней 
				процедуре Power2(X,Res)  для проверки числа X.  Затем головной модуль выводит 
				в окно консоли полученный в Res ответ. На этом работа двухмодульной программы 
				завершается.

				Подсказка: в двоичном представлении степень двойки выглядит как 000…010…00, 
				начальная или конечная последовательность нулей может отсутствовать.  При 
				проверке числа Х рекомендуется использовать маску вида 000…010…00 с подвижной 
				единицей (передвигающейся от правого края маски до левого края), а также 
				команду xor для сравнения битового представления числа Х  с данной маской 
				(командами cmp и sub для сравнения с маской - не пользоваться!).  
				Тесты:   
				1  -> 0,       2  -> 1,      5  -> -1,      256  -> 8,     65536  -> 16,      
				65535  > -1,    1048576  > 20,   2147483648   > 31,     4000000000  > -1   

				--------------------------
				ВСПОМОГАТЕЛЬНЫЙ МОДУЛЬ
				--------------------------
				~
				; эти две строчки вместо include console.inc (не трогайте их !!!):

				.686
				.model flat,stdcall

				; далее - ваше решение

				public Power2

 00000000			.code
 00000000			Power2 proc
 00000000  55			    push EBP
 00000001  8B EC		    mov EBP, ESP
 00000003  50			    push EAX
 00000004  53			    push EBX
 00000005  51			    push ECX
 00000006  52			    push EDX
 00000007  8B 45 08		    mov EAX, [EBP + 8];X
 0000000A  B9 00000020		    mov ECX, 32
 0000000F  BB 00000001		    mov EBX, 1
 00000014  8B D0		@L: mov EDX, EAX
 00000016  33 D3		    xor EDX, EBX
 00000018  F7 C2 FFFFFFFF	    test EDX, 0FFFFFFFFh
 0000001E  74 0C		    jZ @good
 00000020  D1 C3		    ROL EBX, 1
 00000022  E2 F0		    loop @L
 00000024  8B 45 0C		    mov EAX, [EBP + 12]
 00000027  C6 00 FF		    mov [EAX], byte ptr -1
 0000002A  EB 0C		    jmp @ennd
 0000002C			@good:
 0000002C  8B 45 0C		    mov EAX, [EBP + 12]
 0000002F  BB 00000020		    mov EBX, 32
 00000034  2B D9		    sub EBX, ECX
 00000036  89 18		    mov [EAX], EBX
 00000038			@ennd:
 00000038  5A			    pop EDX
 00000039  59			    pop ECX
 0000003A  5B			    pop EBX
 0000003B  58			    pop EAX
 0000003C  5D			    pop EBP
 0000003D  C2 0008		    ret 4 * 2
 00000040			Power2 endp

				end
				    
				    
Microsoft (R) Macro Assembler Version 6.14.8444		    05/16/20 10:48:10
u1.asm							     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000040 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

Power2 . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000040 Public STDCALL
  @L . . . . . . . . . . . . . .	L Near	 00000014 _TEXT	
  @good  . . . . . . . . . . . .	L Near	 0000002C _TEXT	
  @ennd  . . . . . . . . . . . .	L Near	 00000038 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT

	   0 Warnings
	   0 Errors
